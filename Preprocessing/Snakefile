import pandas as pd

configfile: "config.yaml"
workdir: config['wd']

tsv=pd.read_table(config["samples"])
SAMPLES=tsv["sample"].values.tolist()


rule all:
    input:
        expand("qc/fastqc_pre/{sample}/{sample}R1_fastqc.html", sample=SAMPLES),
        expand("illumina/clean/{sample}/{sample}R1.fastq.gz", sample=SAMPLES),
        expand("qc/fastqc_post/{sample}/{sample}R1_fastqc.html", sample=SAMPLES),
        expand("assembly/spades/{sample}/contigs.fasta", sample=SAMPLES),
        expand("qc/quast/spades/{sample}/report.txt", sample=SAMPLES),
        expand("reports/bandage/spades/{sample}.svg", sample=SAMPLES),
        expand("nanopore/{sample}.trim.fastq.gz", sample=SAMPLES),
        expand("qc/nanoplot/{sample}/NanoStats.txt", sample=SAMPLES),
        expand("assembly/unicycler/{sample}/assembly.fasta", sample=SAMPLES),
        expand("qc/quast/unicycler/{sample}/report.txt", sample=SAMPLES),
        expand("reports/bandage/unicycler/{sample}.svg", sample=SAMPLES),
        expand("annotation/unicycler/{sample}/{sample}.gbk", sample=SAMPLES),
      	expand("annotation/spades/{sample}/{sample}.gbk", sample=SAMPLES),
        expand("qc/prokka/spades/{sample}/report.txt", sample=SAMPLES),
	    #"reports/multiqc_report.html"

rule fastqc_preqc:
    input:
        R1="illumina/raw/{sample}R1.fastq.gz",
        R2="illumina/raw/{sample}R2.fastq.gz"
    output:
        "qc/fastqc_pre/{sample}/{sample}R1_fastqc.html"
    threads:
        config['threads']
    shell:
        "fastqc -f fastq -t {threads} -o qc/fastqc_pre/{wildcards.sample} {input.R1} && "
        "fastqc -f fastq -t {threads} -o qc/fastqc_pre/{wildcards.sample} {input.R2}"

rule trimmomatic:
    input:
       R1="illumina/raw/{sample}R1.fastq.gz",
       R2="illumina/raw/{sample}R2.fastq.gz"
    output:
        "illumina/clean/{sample}/{sample}R1.fastq.gz",
        "illumina/clean/{sample}/{sample}R2.fastq.gz",
        "illumina/clean/{sample}/{sample}.unpaired.fastq.gz",
	"qc/trimmomatic/{sample}.log"
    threads:
        config['threads']
    shell:
        "trimmomatic PE -phred33 {input.R1} {input.R2} -threads {threads} "
        "illumina/clean/{wildcards.sample}/{wildcards.sample}R1.fastq.gz illumina/clean/{wildcards.sample}/{wildcards.sample}R1.unpaired.fastq.gz "
        "illumina/clean/{wildcards.sample}/{wildcards.sample}R2.fastq.gz illumina/clean/{wildcards.sample}/{wildcards.sample}R2.unpaired.fastq.gz "
        "ILLUMINACLIP:Snakemake/NexteraPE-PE.fa:2:30:10 "
        "LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 && 2> qc/trimmomatic/{wildcards.sample}.log && "
        "cat illumina/clean/{wildcards.sample}/{wildcards.sample}R1.unpaired.fastq.gz "
        "illumina/clean/{wildcards.sample}/{wildcards.sample}R2.unpaired.fastq.gz > "
        "illumina/clean/{wildcards.sample}/{wildcards.sample}.unpaired.fastq.gz && "
        "rm illumina/clean/{wildcards.sample}/{wildcards.sample}R2.unpaired.fastq.gz "
        "illumina/clean/{wildcards.sample}/{wildcards.sample}R1.unpaired.fastq.gz "

rule fastqc_postqc:
    input:
        R1="illumina/clean/{sample}/{sample}R1.fastq.gz",
        R2="illumina/clean/{sample}/{sample}R2.fastq.gz"
    output:
        "qc/fastqc_post/{sample}/{sample}R1_fastqc.html"
    threads:
        config['threads']
    shell:
        "fastqc -f fastq -t {threads} -o qc/fastqc_post/{wildcards.sample} {input.R1} && "
        "fastqc -f fastq -t {threads} -o qc/fastqc_post/{wildcards.sample} {input.R2}"

rule spades_asm:
    input:
        R1="illumina/clean/{sample}/{sample}R1.fastq.gz",
        R2="illumina/clean/{sample}/{sample}R2.fastq.gz",
        U="illumina/clean/{sample}/{sample}.unpaired.fastq.gz"
    output:
        "assembly/spades/{sample}/contigs.fasta",
        "assembly/spades/{sample}/assembly_graph.fastg"
    threads:
        config['threads']
    shell:
        "spades.py -1 {input.R1} -2 {input.R2} -s {input.U} --careful "
        "-o assembly/spades/{wildcards.sample} -t {threads}"

rule quast_spades:
    input:
        "assembly/spades/{sample}/contigs.fasta"
    output:
        "qc/quast/spades/{sample}/report.txt"
    threads:
        config['threads']
    shell:
        "quast.py -o qc/quast/spades/{wildcards.sample} "
        "-t {threads} {input}"

rule bandage_spades:
    input:
        "assembly/spades/{sample}/assembly_graph.fastg"
    output:
        "reports/bandage/spades/{sample}.svg"
    shell:
        "Bandage image {input} {output} "
        "--colour uniform --height 1000 --width 1500"

rule porechop_nanopore:
    input:
        "nanopore/{sample}.fastq.gz"
    output:
        "nanopore/{sample}.trim.fastq.gz"
    threads:
        config['threads']
    shell:
        "porechop -t {threads} -i {input} -o {output}"

rule nanoplot:
    input:
        "nanopore/{sample}.trim.fastq.gz"
    output:
        "qc/nanoplot/{sample}/NanoStats.txt"
    threads:
        config['threads']
    shell:
        "NanoPlot -t {threads} -o qc/nanoplot/{wildcards.sample}/ "
        "--fastq {input}"

rule unicycler_asm:
    input:
        R1="illumina/clean/{sample}/{sample}R1.fastq.gz",
        R2="illumina/clean/{sample}/{sample}R2.fastq.gz",
        U="illumina/clean/{sample}/{sample}.unpaired.fastq.gz",
        LR="nanopore/{sample}.trim.fastq.gz"
    output:
        "assembly/unicycler/{sample}/assembly.fasta",
        "assembly/unicycler/{sample}/assembly.gfa",
        "assembly/unicycler/{sample}/003_long_read_assembly.gfa"
    threads:
        config['threads']
    shell:
        "unicycler -t {threads} "
        "-1 {input.R1} -2 {input.R2} -s {input.U} -l {input.LR} "
        "-o assembly/unicycler/{wildcards.sample}"

rule quast_unicycler:
    input:
        "assembly/unicycler/{sample}/assembly.fasta"
    output:
        "qc/quast/unicycler/{sample}/report.txt"
    threads:
        config['threads']
    shell:
        "quast.py -o qc/quast/unicycler/{wildcards.sample} "
        "-t {threads} {input}"

rule bandage_unicycler:
    input:
        full="assembly/unicycler/{sample}/assembly.gfa",
        lr="assembly/unicycler/{sample}/003_long_read_assembly.gfa"
    output:
        full="reports/bandage/unicycler/{sample}.svg",
        #lr="reports/bandage/unicycler/{sample}_longreads.svg"
    shell:
        "Bandage image {input.full} {output.full} "
        "--colour uniform --height 1000 --width 1500 "#"&&"
        #"Bandage image {input.lr} {output.lr} "
        #"--colour uniform --height 1000 --width 1500"

rule prokka_annotation_spades:
    input:
        "assembly/spades/{sample}/contigs.fasta"
    output:
        "annotation/spades/{sample}/{sample}.gbk"
    threads:
        config['threads']
    conda:
        "prokka.yml"
    shell:
        "prokka --kingdom Bacteria --cpus {threads} "
        "--strain {wildcards.sample} "
        "--locustag {wildcards.sample} --prefix {wildcards.sample} "
        "--outdir annotation/spades/{wildcards.sample} --force {input} &&"
        "cp annotation/spades/{wildcards.sample}/{wildcards.sample}.txt "
        "qc/prokka/spades/{wildcards.sample}/{wildcards.sample}.txt"

rule prokka_annotation_unicycler:
    input:
        "assembly/unicycler/{sample}/assembly.fasta"
    output:
        "annotation/unicycler/{sample}/{sample}.gbk"
    threads:
        config['threads']
    conda:
        "prokka.yml"
    shell:
        "prokka --kingdom Bacteria --cpus {threads} "
        "--strain {wildcards.sample} "
        "--locustag {wildcards.sample} --prefix {wildcards.sample} "
        "--outdir annotation/unicycler/{wildcards.sample} --force {input} &&"
        "cp annotation/unicycler/{wildcards.sample}/{wildcards.sample}.txt "
        "qc/prokka/unicycler/{wildcards.sample}/{wildcards.sample}.txt"

rule multiqc:
    #input:
    #    expand("qc/fastqc_pre/{sample}/{sample}R1_fastqc.html",sample=SAMPLES),
    #    expand("qc/fastqc_pre/{sample}/{sample}R2_fastqc.html",sample=SAMPLES),
    #    expand("qc/fastqc_post/{sample}/{sample}R1_fastqc.html",sample=SAMPLES),
    #    expand("qc/fastqc_post/{sample}/{sample}R2_fastqc.html",sample=SAMPLES,
    #    expand("qc/prokka/spades/{wildcards.sample}.txt",sample=SAMPLES),
    #    expand("qc/prokka/unicycler/{wildcards.sample}.txt",sample=SAMPLES),
    #    expand("qc/trimmomatic/{sample}.log",sample=SAMPLES),
    #    expand("qc/quast/unicycler/{sample}/report.txt",sample=SAMPLES),
    #     expand("qc/quast/spades/{sample}/report.txt",sample=SAMPLES)
    output:
        "reports/multiqc_report.html"
    conda:
        "multiqc.yml"
    shell:
        "multiqc -o reports/  ./qc/fastqc* ./qc/trimmomatic ./qc/prokka && "
        "mulitqc -o reports/ -n multiqc_report_quast.html -dd 2 ./qc/quast"
